#!/usr/bin/env python3
from argparse import ArgumentParser

import dearpygui.dearpygui as dpg

from siebenapp.domain import Add, EdgeType
from siebenapp.filter_view import FilterBy
from siebenapp.open_view import ToggleOpenView
from siebenapp.render import (
    Renderer,
    render_lines,
    GeometryProvider,
    Point,
    RenderResult,
)
from siebenapp.switchable_view import ToggleSwitchableView
from siebenapp.system import load, split_long, save

dpg.create_context()

with dpg.font_registry():
    with dpg.font("Ubuntu-R.ttf", 14) as f1:
        dpg.add_font_range_hint(dpg.mvFontRangeHint_Cyrillic)
        default_font = f1

dpg.create_viewport(title="SiebenApp")
dpg.setup_dearpygui()

parser = ArgumentParser()
parser.add_argument(
    "db",
    nargs="?",
    default="sieben.db",
    help="Path to the database file (default: sieben.db)",
)
args = parser.parse_args()
goaltree = load(args.db)
is_running = True
is_dialog = False
phase = "goals"  # no_update -> goals -> edges -> no_update
render_result = RenderResult({}, {})
drawn_items = []
nodes = {}


class DPGGeometry(GeometryProvider):
    def _pos(self, row, col):
        if col < 0:
            return 0, self._pos(row, 0)[1]
        if (row, col) in nodes:
            return dpg.get_item_pos(nodes[(row, col)])
        return 100 + col * 300, 50 + row * 120

    def _size(self, row, col):
        if col < 0:
            return 0, self._size(row, 0)[1]
        if (row, col) in nodes:
            return dpg.get_item_rect_size(nodes[(row, col)])
        return 250, 70

    def top_left(self, row, col):
        pos = self._pos(row, col)
        return Point(pos[0], pos[1])

    def top_right(self, row, col):
        size = self._size(row, col)
        return self.top_left(row, col) + Point(size[0], 0)

    def bottom_left(self, row, col):
        size = self._size(row, col)
        return self.top_left(row, col) + Point(0, size[1])

    def bottom_right(self, row, col):
        size = self._size(row, col)
        return self.top_left(row, col) + Point(size[0], size[1])


def rebuild_goals():
    global phase
    global render_result
    global nodes
    save(goaltree, args.db)
    render_result = Renderer(goaltree).build()
    nodes = nodes[:]
    gp = DPGGeometry()
    while drawn_items:
        previous_tag = drawn_items.pop()
        dpg.delete_item(previous_tag)
    for goal_id, attrs in render_result.graph.items():
        if isinstance(goal_id, str):
            continue
        goal_text = split_long(attrs["name"])
        # pos = [100 + attrs["col1"] * 300, 50 + attrs["row"] * 120]
        pos = gp.top_left(attrs["row"], attrs["col"]).as_tuple()
        status_color = (255, 0, 0, 255) if attrs["open"] else (0, 255, 0, 255)
        widget_tag = f"goal_{goal_id}"
        drawn_items.append(widget_tag)
        nodes[(attrs["row"], attrs["col"])] = widget_tag
        with dpg.group(pos=pos, parent="primary", tag=widget_tag):
            with dpg.table(
                header_row=False, borders_outerV=True, borders_outerH=True, width=250
            ) as table_id:
                dpg.add_table_column()
                with dpg.table_row():
                    with dpg.group(horizontal=True):
                        if attrs["switchable"]:
                            dpg.add_checkbox()
                        dpg.add_text(str(goal_id), color=status_color)
                        dpg.add_text(goal_text)
                if attrs["select"] == "select":
                    dpg.highlight_table_row(table_id, 0, (128, 128, 128, 255))
                elif attrs["select"] == "prev":
                    dpg.highlight_table_row(table_id, 0, (192, 192, 192, 255))
    phase = "edges"


def rebuild_edges():
    global phase
    line_width = {
        EdgeType.BLOCKER: 0.7,
        EdgeType.PARENT: 2.5,
    }
    lines = render_lines(DPGGeometry(), render_result)
    for edge_type, start, end, _ in lines:
        tag = f"line {edge_type} {start}, {end}"
        if tag in drawn_items:
            # looks like a bug in rendering: lines may duplicate
            continue
        dpg.draw_line(
            start.as_tuple(),
            end.as_tuple(),
            color=(127, 127, 127, 127, 255),
            thickness=line_width[edge_type],
            tag=tag,
            parent="primary",
        )
        drawn_items.append(tag)

    phase = "no_update"


def submit_dialog(sender, app_data, user_data):
    global is_dialog
    global phase
    is_dialog = False
    user_input = dpg.get_value("dialog_input")
    goaltree.accept(user_data(user_input))
    phase = "goals"
    dpg.delete_item("dialog")


def close_dialog(sender, app_data, user_data):
    global is_dialog
    is_dialog = False
    dpg.delete_item("dialog")


def show_dialog(text, event_factory):
    global is_dialog
    is_dialog = True
    with dpg.window(id="dialog", modal=True, no_title_bar=True):
        dpg.add_text(text)
        dpg.add_input_text(tag="dialog_input")
        with dpg.group(horizontal=True):
            dpg.add_button(
                label="OK", width=75, callback=submit_dialog, user_data=event_factory
            )
            dpg.add_button(label="Cancel", width=75, callback=close_dialog)


def key_handler(sender, app_data):
    global is_running
    global phase
    if is_dialog:
        return
    if app_data == 81:  # q
        is_running = False
    elif app_data == 65:  # a
        show_dialog("Add new goal", Add)
    elif app_data == 70:  # f
        show_dialog("Filter by substring (leave empty to reset filtration)", FilterBy)
    elif app_data == 78:  # n
        goaltree.accept(ToggleOpenView())
        phase = "goals"
    elif app_data == 84:  # t
        goaltree.accept(ToggleSwitchableView())
        phase = "goals"
    else:
        print(app_data)


with dpg.window(tag="primary"):
    dpg.bind_font(default_font)

with dpg.handler_registry():
    dpg.add_key_press_handler(callback=key_handler)

dpg.show_viewport()
dpg.set_primary_window("primary", True)

while dpg.is_dearpygui_running() and is_running:
    if phase == "goals":
        rebuild_goals()
    elif phase == "edges":
        rebuild_edges()
    dpg.render_dearpygui_frame()

dpg.destroy_context()
