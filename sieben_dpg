#!/usr/bin/env python3
from argparse import ArgumentParser

import dearpygui.dearpygui as dpg

from siebenapp.system import load, split_long
from siebenapp.render import Renderer

dpg.create_context()

with dpg.font_registry():
    with dpg.font("Ubuntu-R.ttf", 14) as f1:
        dpg.add_font_range_hint(dpg.mvFontRangeHint_Cyrillic)
        default_font = f1

dpg.create_viewport(title="SiebenApp")
dpg.setup_dearpygui()

parser = ArgumentParser()
parser.add_argument(
    "db",
    nargs="?",
    default="sieben.db",
    help="Path to the database file (default: sieben.db)",
)
args = parser.parse_args()
goaltree = load(args.db)
render_result = Renderer(goaltree).build()


with dpg.window(tag="primary"):
    dpg.bind_font(default_font)

    for goal_id, attrs in render_result.graph.items():
        if isinstance(goal_id, str):
            continue
        label = split_long(attrs["name"])
        pos = [100 + attrs["col1"] * 300, attrs["row"] * 120]
        dpg.draw_text(pos, label, size=15)
        points = [
            pos,
            [pos[0] + 100, pos[1]],
            [pos[0] + 100, pos[1] + 50],
            [pos[0], pos[1] + 50],
            pos,
        ]
        color = (255, 0, 0, 255) if attrs["open"] else (0, 255, 0, 255)
        dpg.draw_polygon(points, color=color)


is_running = True


def key_handler(sender, app_data):
    global is_running
    if app_data == 81:  # q
        is_running = False
    else:
        print(app_data)


with dpg.handler_registry():
    dpg.add_key_press_handler(callback=key_handler)

dpg.show_viewport()
dpg.set_primary_window("primary", True)

while dpg.is_dearpygui_running() and is_running:
    dpg.render_dearpygui_frame()

dpg.destroy_context()
