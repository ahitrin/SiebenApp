#!/usr/bin/env python3
from argparse import ArgumentParser

import dearpygui.dearpygui as dpg

from siebenapp.filter_view import FilterBy
from siebenapp.open_view import ToggleOpenView
from siebenapp.render import Renderer
from siebenapp.switchable_view import ToggleSwitchableView
from siebenapp.system import load, split_long

dpg.create_context()

with dpg.font_registry():
    with dpg.font("Ubuntu-R.ttf", 14) as f1:
        dpg.add_font_range_hint(dpg.mvFontRangeHint_Cyrillic)
        default_font = f1

dpg.create_viewport(title="SiebenApp")
dpg.setup_dearpygui()

parser = ArgumentParser()
parser.add_argument(
    "db",
    nargs="?",
    default="sieben.db",
    help="Path to the database file (default: sieben.db)",
)
args = parser.parse_args()
goaltree = load(args.db)
is_running = True
is_dialog = False
need_update = True
drawn_items = []


def do_update():
    render_result = Renderer(goaltree).build()
    while drawn_items:
        previous_tag = drawn_items.pop()
        dpg.delete_item(previous_tag)
    for goal_id, attrs in render_result.graph.items():
        if isinstance(goal_id, str):
            continue
        goal_text = split_long(attrs["name"])
        pos = [100 + attrs["col1"] * 300, 50 + attrs["row"] * 120]
        status_color = (255, 0, 0, 255) if attrs["open"] else (0, 255, 0, 255)
        widget_tag = f"goal_{goal_id}"
        drawn_items.append(widget_tag)
        with dpg.group(pos=pos, parent="primary", tag=widget_tag):
            with dpg.table(
                header_row=False, borders_outerV=True, borders_outerH=True, width=250
            ) as table_id:
                dpg.add_table_column()
                with dpg.table_row():
                    with dpg.group(horizontal=True):
                        if attrs["switchable"]:
                            dpg.add_checkbox()
                        dpg.add_text(str(goal_id), color=status_color)
                        dpg.add_text(goal_text)
                if attrs["select"] == "select":
                    dpg.highlight_table_row(table_id, 0, (128, 128, 128, 255))
                elif attrs["select"] == "prev":
                    dpg.highlight_table_row(table_id, 0, (192, 192, 192, 255))


def submit_dialog(sender, app_data, user_data):
    global is_dialog
    global need_update
    is_dialog = False
    user_input = dpg.get_value("dialog_input")
    goaltree.accept(FilterBy(user_input))
    need_update = True
    dpg.delete_item("dialog")


def close_dialog(sender, app_data, user_data):
    global is_dialog
    is_dialog = False
    dpg.delete_item("dialog")


def show_filter_dialog():
    global is_dialog
    is_dialog = True
    with dpg.window(id="dialog", modal=True, no_title_bar=True):
        dpg.add_text("Filter by substring (leave empty to reset filtration)")
        dpg.add_input_text(tag="dialog_input")
        with dpg.group(horizontal=True):
            dpg.add_button(label="OK", width=75, callback=submit_dialog)
            dpg.add_button(label="Cancel", width=75, callback=close_dialog)


def key_handler(sender, app_data):
    global is_running
    global need_update
    if is_dialog:
        if app_data == 256:  # Esc
            close_dialog(None, None, None)
        elif app_data == 257:  # Enter
            submit_dialog(None, None, None)
        return
    if app_data == 81:  # q
        is_running = False
    elif app_data == 70:  # f
        show_filter_dialog()
    elif app_data == 78:  # n
        goaltree.accept(ToggleOpenView())
        need_update = True
    elif app_data == 84:  # t
        goaltree.accept(ToggleSwitchableView())
        need_update = True
    else:
        print(app_data)


with dpg.window(tag="primary"):
    dpg.bind_font(default_font)

with dpg.handler_registry():
    dpg.add_key_press_handler(callback=key_handler)

dpg.show_viewport()
dpg.set_primary_window("primary", True)

while dpg.is_dearpygui_running() and is_running:
    if need_update:
        do_update()
        need_update = False
    dpg.render_dearpygui_frame()

dpg.destroy_context()
