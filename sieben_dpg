#!/usr/bin/env python3
from argparse import ArgumentParser

import dearpygui.dearpygui as dpg

from siebenapp.domain import (
    Add,
    EdgeType,
    Select,
    ToggleClose,
    Delete,
    Insert,
    ToggleLink,
    HoldSelect,
    Rename,
)
from siebenapp.filter_view import FilterBy
from siebenapp.open_view import ToggleOpenView
from siebenapp.progress_view import ToggleProgress
from siebenapp.render import (
    Renderer,
    render_lines,
    GeometryProvider,
    Point,
    RenderResult,
)
from siebenapp.switchable_view import ToggleSwitchableView
from siebenapp.system import load, split_long, save
from siebenapp.zoom import ToggleZoom

dpg.create_context()

with dpg.font_registry():
    with dpg.font("Ubuntu-R.ttf", 14) as f1:
        dpg.add_font_range_hint(dpg.mvFontRangeHint_Cyrillic)
        default_font = f1

dpg.create_viewport(title="SiebenApp")
dpg.setup_dearpygui()

parser = ArgumentParser()
parser.add_argument(
    "db",
    nargs="?",
    default="sieben.db",
    help="Path to the database file (default: sieben.db)",
)
args = parser.parse_args()
goaltree = load(args.db)
is_running = True
dialog_event_factory = None
phase = "zero"  # zero -> loop [ goals -> edges -> no_update -> ... ]
render_result = RenderResult({}, {})
drawn_items = []
nodes = {}
columns = Renderer.DEFAULT_WIDTH


class DPGGeometry(GeometryProvider):
    def _pos(self, row, col):
        if col < 0:
            return 0, self._pos(row, 0)[1]
        if (row, col) in nodes:
            return dpg.get_item_pos(nodes[(row, col)])
        return 20 + col * 270, 10 + row * 100

    def _size(self, row, col):
        if col < 0:
            return 0, self._size(row, 0)[1]
        if (row, col) in nodes:
            return dpg.get_item_rect_size(nodes[(row, col)])
        return 250, 70

    def top_left(self, row, col):
        pos = self._pos(row, col)
        return Point(pos[0], pos[1])

    def top_right(self, row, col):
        size = self._size(row, col)
        return self.top_left(row, col) + Point(size[0], 0)

    def bottom_left(self, row, col):
        size = self._size(row, col)
        return self.top_left(row, col) + Point(0, size[1])

    def bottom_right(self, row, col):
        size = self._size(row, col)
        return self.top_left(row, col) + Point(size[0], size[1])


def text_width(text: str) -> int:
    size = dpg.get_text_size(text, font=default_font)
    return size[0] if size is not None else 0


def rebuild_goals():
    global phase
    global render_result
    global nodes
    save(goaltree, args.db)
    render_result = Renderer(goaltree, columns).build()
    gp = DPGGeometry()
    nodes.clear()
    while drawn_items:
        previous_tag = drawn_items.pop()
        dpg.delete_item(previous_tag)
    add_to_nodes = {}
    for goal_id, attrs in render_result.graph.items():
        if isinstance(goal_id, str):
            continue
        goal_text = split_long(attrs["name"])
        row, col = attrs["row"], attrs["col1"]
        pos = gp.top_left(row, col).as_tuple()
        status_color = (255, 0, 0, 255) if attrs["open"] else (0, 255, 0, 255)
        widget_tag = f"goal_{goal_id}"
        drawn_items.append(widget_tag)
        add_to_nodes[(row, col)] = widget_tag
        with dpg.group(pos=pos, parent="primary", tag=widget_tag):
            widget_width = text_width(goal_text) + text_width(str(goal_id)) + 20
            if attrs["switchable"]:
                widget_width += 50
            with dpg.table(
                header_row=False,
                borders_outerV=True,
                borders_outerH=True,
                width=widget_width,
            ) as table_id:
                dpg.add_table_column()
                with dpg.table_row():
                    with dpg.group(horizontal=True):
                        if attrs["switchable"]:
                            dpg.add_checkbox()
                        dpg.add_text(str(goal_id), color=status_color)
                        dpg.add_text(goal_text)
                if attrs["select"] == "select":
                    dpg.highlight_table_row(table_id, 0, (128, 128, 128, 255))
                elif attrs["select"] == "prev":
                    dpg.highlight_table_row(table_id, 0, (192, 192, 192, 255))
    nodes.update(add_to_nodes)
    phase = "edges"


def rebuild_edges():
    global phase
    line_color = {
        EdgeType.BLOCKER: (70, 70, 70, 255),
        EdgeType.PARENT: (180, 180, 180, 255),
    }
    lines = render_lines(DPGGeometry(), render_result)
    for edge_type, start, end, _ in lines:
        tag = f"line {edge_type} {start}, {end}"
        if tag in drawn_items:
            # lines may 'duplicate' when they're placed too close to each other
            # tag duplication causes an error within draw_line
            continue
        dpg.draw_line(
            start.as_tuple(),
            end.as_tuple(),
            color=line_color[edge_type],
            tag=tag,
            parent="primary",
        )
        drawn_items.append(tag)

    phase = "no_update"


def submit_dialog(sender=None, app_data=None, user_data=None):
    global dialog_event_factory
    global phase
    user_input = dpg.get_value("dialog_input")
    goaltree.accept(dialog_event_factory(user_input))
    dialog_event_factory = None
    phase = "goals"
    dpg.delete_item("dialog")


def close_dialog(sender=None, app_data=None, user_data=None):
    global dialog_event_factory
    dialog_event_factory = None
    dpg.delete_item("dialog")


def show_dialog(text, event_factory, default_value=""):
    global dialog_event_factory
    dialog_event_factory = event_factory
    vp_width = dpg.get_viewport_width()
    vp_height = dpg.get_viewport_height()
    dialog_pos = (0, vp_height // 2)
    with dpg.window(
        id="dialog",
        modal=True,
        no_title_bar=True,
        pos=dialog_pos,
        width=vp_width - 10,
    ):
        with dpg.group(horizontal=True):
            dpg.add_text(text)
            dpg.add_input_text(tag="dialog_input", default_value=default_value)
            dpg.focus_item("dialog_input")
            with dpg.group():
                dpg.add_button(
                    label="OK",
                    width=75,
                    callback=submit_dialog,
                )
                dpg.add_spacer(height=15)
                dpg.add_button(label="Cancel", width=75, callback=close_dialog)


def key_handler(sender, app_data):
    global is_running
    global phase
    global columns
    if dialog_event_factory is not None:
        if app_data == 256:  # Esc
            close_dialog()
        elif app_data == 257:  # Enter
            submit_dialog()
        return
    if app_data == 81:  # q
        is_running = False
    elif 48 <= app_data <= 57:  # 0-9
        goaltree.accept(Select(app_data - 48))
        phase = "goals"
    elif app_data == 65:  # a
        show_dialog("Add new goal", Add)
    elif app_data == 67:  # c
        goaltree.accept(ToggleClose())
        phase = "goals"
    elif app_data == 68:  # d
        goaltree.accept(Delete())
        phase = "goals"
    elif app_data == 70:  # f
        show_dialog("Filter by substring (leave empty to reset filtration)", FilterBy)
    elif app_data == 73:  # i
        show_dialog("Insert new goal", Insert)
    elif app_data == 75:  # k
        goaltree.accept(ToggleLink(edge_type=EdgeType.PARENT))
        phase = "goals"
    elif app_data == 76:  # l
        goaltree.accept(ToggleLink())
        phase = "goals"
    elif app_data == 78:  # n
        goaltree.accept(ToggleOpenView())
        phase = "goals"
    elif app_data == 80:  # p
        goaltree.accept(ToggleProgress())
        phase = "goals"
    elif app_data == 82:  # r
        data = goaltree.q(keys="name,select").values()
        selected_text = [x["name"] for x in data if x["select"] == "select"].pop()
        show_dialog("Rename goal", Rename, selected_text)
    elif app_data == 84:  # t
        goaltree.accept(ToggleSwitchableView())
        phase = "goals"
    elif app_data == 90:  # z
        goaltree.accept(ToggleZoom())
        phase = "goals"
    elif app_data == 32:  # space
        goaltree.accept(HoldSelect())
        phase = "goals"
    elif app_data in (61, 334):  # +
        if columns < 100:
            columns += 1
            phase = "goals"
    elif app_data in (45, 333):  # -
        if columns > 1:
            columns -= 1
            phase = "goals"
    elif app_data not in (340, 341, 342, 343, 344, 345, 346):
        # ignore mod keys
        print(app_data)


with dpg.window(tag="primary"):
    dpg.bind_font(default_font)

with dpg.handler_registry():
    dpg.add_key_press_handler(callback=key_handler)

dpg.maximize_viewport()
dpg.show_viewport()
dpg.set_primary_window("primary", True)

while dpg.is_dearpygui_running() and is_running:
    if phase == "goals":
        rebuild_goals()
    elif phase == "edges":
        rebuild_edges()
    elif phase == "zero":
        phase = "goals"
    dpg.render_dearpygui_frame()

dpg.destroy_context()
