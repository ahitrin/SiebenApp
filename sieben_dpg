#!/usr/bin/env python3
from argparse import ArgumentParser
from typing import List, Tuple, Dict, Any

import dearpygui.dearpygui as dpg

from siebenapp.autolink import ToggleAutoLink
from siebenapp.domain import (
    Add,
    EdgeType,
    Select,
    ToggleClose,
    Delete,
    Insert,
    ToggleLink,
    HoldSelect,
    Rename,
    Graph,
)
from siebenapp.filter_view import FilterBy
from siebenapp.open_view import ToggleOpenView
from siebenapp.progress_view import ToggleProgress
from siebenapp.render import (
    Renderer,
    render_lines,
    GeometryProvider,
    Point,
    RenderResult,
    adjust_graph,
)
from siebenapp.switchable_view import ToggleSwitchableView
from siebenapp.system import load, split_long, save
from siebenapp.zoom import ToggleZoom

dpg.create_context()

with dpg.font_registry():
    with dpg.font("Ubuntu-R.ttf", 14) as f1:
        dpg.add_font_range_hint(dpg.mvFontRangeHint_Cyrillic)
        default_font = f1

dpg.create_viewport(title="SiebenApp")
dpg.setup_dearpygui()


class DPGGeometry(GeometryProvider):
    def __init__(self, nodes: Dict[Tuple[int, int], Any]):
        self.nodes = nodes

    def _pos(self, row, col):
        if col < 0:
            return 0, self._pos(row, 0)[1]
        if (row, col) in self.nodes:
            return dpg.get_item_pos(self.nodes[(row, col)])
        if col == 0:
            return 20, 50 + row * 100
        left_pos = self._pos(row, col - 1)
        left_size = self._size(row, col - 1)
        return left_pos[0] + left_size[0] + 50, left_pos[1]

    def _size(self, row, col):
        if col < 0:
            return 0, self._size(row, 0)[1]
        if (row, col) in self.nodes:
            return dpg.get_item_rect_size(self.nodes[(row, col)])
        return 250, 30

    def top_left(self, row, col):
        pos = self._pos(row, col)
        return Point(pos[0], pos[1])

    def top_right(self, row, col):
        size = self._size(row, col)
        return self.top_left(row, col) + Point(size[0], 0)

    def bottom_left(self, row, col):
        size = self._size(row, col)
        return self.top_left(row, col) + Point(0, size[1])

    def bottom_right(self, row, col):
        size = self._size(row, col)
        return self.top_left(row, col) + Point(size[0], size[1])


def text_width(text: str) -> int:
    size = dpg.get_text_size(text, font=default_font)
    return size[0] if size is not None else 0


def show_message(text):
    dpg.set_value("message", text)


class SiebenApp:
    def __init__(self, filename: str):
        self.filename: str = filename
        self.goaltree: Graph = load(self.filename, show_message)
        self.is_running: bool = True
        self.dialog_event_factory = None
        # zero -> loop [ goals -> adjust -> edges -> no_update -> ... ]
        self.phase: str = "zero"
        self.render_result: RenderResult = RenderResult({}, {})
        self.drawn_items: List[str] = []
        self.nodes: Dict[Tuple[int, int], Any] = {}
        self.columns: int = Renderer.DEFAULT_WIDTH

    def open_file(self, sender, app_data, user_data):
        db_file = list(app_data.get("selections", {}).values())[:1]
        if db_file:
            self.filename = db_file[0]
            self.goaltree = load(self.filename, show_message)
            self.phase = "goals"

    def rebuild_goals(self):
        save(self.goaltree, self.filename)
        self.render_result = Renderer(self.goaltree, self.columns).build()
        gp = DPGGeometry(self.nodes)
        self.nodes.clear()
        while self.drawn_items:
            previous_tag = self.drawn_items.pop()
            dpg.delete_item(previous_tag)
        add_to_nodes = {}
        for goal_id, attrs in self.render_result.goals():
            goal_text = split_long(attrs["name"])
            row, col = attrs["row"], attrs["col1"]
            pos = gp.top_left(row, col).as_tuple()
            status_color = (255, 0, 0, 255) if attrs["open"] else (0, 255, 0, 255)
            widget_tag = f"goal_{goal_id}"
            self.drawn_items.append(widget_tag)
            add_to_nodes[(row, col)] = widget_tag
            with dpg.group(pos=pos, parent="primary", tag=widget_tag):
                widget_width = text_width(goal_text) + text_width(str(goal_id)) + 20
                if attrs["switchable"]:
                    widget_width += 50
                with dpg.table(
                    header_row=False,
                    borders_outerV=True,
                    borders_outerH=True,
                    width=widget_width,
                ) as table_id:
                    dpg.add_table_column()
                    with dpg.table_row():
                        with dpg.group(horizontal=True):
                            if attrs["switchable"]:
                                dpg.add_checkbox(default_value=not attrs["open"])
                            dpg.add_text(str(goal_id), color=status_color)
                            dpg.add_text(goal_text)
                    if attrs["select"] == "select":
                        dpg.highlight_table_row(table_id, 0, (128, 128, 128, 255))
                    elif attrs["select"] == "prev":
                        dpg.highlight_table_row(table_id, 0, (192, 192, 192, 255))

            dpg.bind_item_handler_registry(widget_tag, "goals_handler")
        self.nodes.update(add_to_nodes)
        self.phase = "adjust"

    def adjust_goals(self):
        gp = DPGGeometry(self.nodes)
        adjust_graph(self.render_result, gp)
        for goal_id, attrs in self.render_result.goals():
            widget_tag = f"goal_{goal_id}"
            dpg.set_item_pos(widget_tag, [attrs["x"], attrs["y"]])
        self.phase = "edges"

    def rebuild_edges(self):
        line_color = {
            EdgeType.BLOCKER: (70, 70, 70, 255),
            EdgeType.PARENT: (180, 180, 180, 255),
        }
        lines = render_lines(DPGGeometry(self.nodes), self.render_result)
        fix = Point(0, -8)
        for edge_type, start, end, _ in lines:
            tag = f"line {edge_type} {start}, {end}"
            if tag in self.drawn_items:
                # lines may 'duplicate' when they're placed too close to each other
                # tag duplication causes an error within draw_line
                continue
            dpg.draw_line(
                (start + fix).as_tuple(),
                (end + fix).as_tuple(),
                color=line_color[edge_type],
                tag=tag,
                parent="primary",
            )
            self.drawn_items.append(tag)

        self.phase = "no_update"


parser = ArgumentParser()
parser.add_argument(
    "db",
    nargs="?",
    default="sieben.db",
    help="Path to the database file (default: sieben.db)",
)
args = parser.parse_args()
app = SiebenApp(args.db)


with dpg.file_dialog(
    directory_selector=False,
    show=False,
    callback=app.open_file,
    width=500,
    height=300,
    tag="open_dialog_id",
):
    dpg.add_file_extension(".db", color=(255, 0, 255, 255), custom_text="[Sieben]")


def submit_dialog(sender=None, app_data=None, user_data=None):
    global app
    user_input = dpg.get_value("dialog_input")
    app.goaltree.accept(app.dialog_event_factory(user_input))
    app.dialog_event_factory = None
    app.phase = "goals"
    dpg.delete_item("dialog")


def close_dialog(sender=None, app_data=None, user_data=None):
    global app
    app.dialog_event_factory = None
    dpg.delete_item("dialog")


def show_dialog(text, event_factory, default_value=""):
    global app
    app.dialog_event_factory = event_factory
    vp_width = dpg.get_viewport_width()
    vp_height = dpg.get_viewport_height()
    dialog_pos = (0, vp_height // 2)
    with dpg.window(
        id="dialog",
        modal=True,
        no_title_bar=True,
        pos=dialog_pos,
        width=vp_width - 10,
    ):
        with dpg.group(horizontal=True):
            dpg.add_text(text)
            dpg.add_input_text(tag="dialog_input", default_value=default_value)
            dpg.focus_item("dialog_input")
            with dpg.group():
                dpg.add_button(
                    label="OK",
                    width=75,
                    callback=submit_dialog,
                )
                dpg.add_spacer(height=15)
                dpg.add_button(label="Cancel", width=75, callback=close_dialog)


def click_handler(sender, app_data):
    global app
    widget_id: str = app_data[1]
    goal_id = int(widget_id.split("_")[1])
    app.goaltree.accept(Select(goal_id))
    app.phase = "goals"


def key_handler(sender, app_data):
    global app
    show_message("")
    if app.dialog_event_factory is not None:
        if app_data == 256:  # Esc
            close_dialog()
        elif app_data == 257:  # Enter
            submit_dialog()
        return
    if app_data == 81:  # q
        app.is_running = False
    elif 48 <= app_data <= 57:  # 0-9
        old_selection = app.goaltree.settings("selection")
        app.goaltree.accept(Select(app_data - 48))
        new_selection = app.goaltree.settings("selection")
        if old_selection != new_selection:
            app.phase = "goals"
    elif app_data == 65:  # a
        show_dialog("Add new goal", Add)
    elif app_data == 67:  # c
        app.goaltree.accept(ToggleClose())
        app.phase = "goals"
    elif app_data == 68:  # d
        app.goaltree.accept(Delete())
        app.phase = "goals"
    elif app_data == 70:  # f
        show_dialog("Filter by substring (leave empty to reset filtration)", FilterBy)
    elif app_data == 73:  # i
        show_dialog("Insert new goal", Insert)
    elif app_data == 75:  # k
        app.goaltree.accept(ToggleLink(edge_type=EdgeType.PARENT))
        app.phase = "goals"
    elif app_data == 76:  # l
        app.goaltree.accept(ToggleLink())
        app.phase = "goals"
    elif app_data == 78:  # n
        app.goaltree.accept(ToggleOpenView())
        app.phase = "goals"
    elif app_data == 79:  # o
        dpg.show_item("open_dialog_id")
    elif app_data == 80:  # p
        app.goaltree.accept(ToggleProgress())
        app.phase = "goals"
    elif app_data == 82:  # r
        data = app.goaltree.q(keys="name,select").values()
        selected_text = [x["name"] for x in data if x["select"] == "select"].pop()
        show_dialog("Rename goal", Rename, selected_text)
    elif app_data == 84:  # t
        app.goaltree.accept(ToggleSwitchableView())
        app.phase = "goals"
    elif app_data == 90:  # z
        app.goaltree.accept(ToggleZoom())
        app.phase = "goals"
    elif app_data == 32:  # space
        app.goaltree.accept(HoldSelect())
        app.phase = "goals"
    elif app_data in (61, 334):  # +
        if app.columns < 100:
            app.columns += 1
            app.phase = "goals"
    elif app_data in (45, 333):  # -
        if app.columns > 1:
            app.columns -= 1
            app.phase = "goals"
    elif app_data == 96:  # `
        show_dialog(
            "Auto link by keyword (leave empty to reset auto link)", ToggleAutoLink
        )
    elif app_data not in (340, 341, 342, 343, 344, 345, 346):
        # ignore mod keys
        print(app_data)


with dpg.window(tag="primary"):
    dpg.bind_font(default_font)
    dpg.add_text(default_value="", tag="message", pos=[5, 5])

with dpg.handler_registry(tag="global_handler"):
    dpg.add_key_press_handler(callback=key_handler)

with dpg.item_handler_registry(tag="goals_handler"):
    dpg.add_item_clicked_handler(callback=click_handler)

dpg.maximize_viewport()
dpg.show_viewport()
dpg.set_primary_window("primary", True)

while dpg.is_dearpygui_running() and app.is_running:
    if app.phase == "goals":
        app.rebuild_goals()
    elif app.phase == "adjust":
        app.adjust_goals()
    elif app.phase == "edges":
        app.rebuild_edges()
    elif app.phase == "zero":
        app.phase = "goals"
    dpg.render_dearpygui_frame()

dpg.destroy_context()
